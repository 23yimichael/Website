name: api-cd

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      VERSION: 1.2.0

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Create application.properties
        working-directory: ./backend/src/main/resources
        run: |
          touch application.properties
          echo "auth.whitelisted-emails=${{ secrets.API_AUTH_WHITELISTED_EMAILS }}" >> ./application.properties
          echo "aws.access-key=${{ secrets.API_AWS_ACCESS_KEY }}" >> ./application.properties
          echo "aws.secret-key=${{ secrets.API_AWS_SECRET_KEY }}" >> ./application.properties
          echo "aws.s3.bucket=personal-website-api-bucket-prod" >> ./application.properties
          echo "security.cors.allowed-origins=https://michael-yi.com,https://admin.michael-yi.com" >> ./application.properties
          echo "security.jwt.secret-key=${{ secrets.API_SECURITY_JWT_SECRET_KEY }}" >> ./application.properties
          echo "spring.application.name=personal-website-api" >> ./application.properties
          echo "spring.datasource.url=jdbc:mysql://localhost:3306/personal_website_api_db" >> ./application.properties
          echo "spring.datasource.username=${{ secrets.API_SPRING_DATASOURCE_USERNAME }}" >> ./application.properties
          echo "spring.datasource.password=${{ secrets.API_SPRING_DATASOURCE_PASSWORD }}" >> ./application.properties
          echo "spring.jpa.hibernate.ddl-auto=validate" >> ./application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> ./application.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect" >> ./application.properties
          echo "spring.cache.type=redis" >> ./application.properties
          echo "spring.cache.redis.time-to-live=900000" >> ./application.properties
          echo "spring.data.redis.host=localhost" >> ./application.properties
          echo "spring.data.redis.port=6379" >> ./application.properties
          echo "spring.data.redis.password=${{ secrets.API_SPRING_DATA_REDIS_PASSWORD }}" >> ./application.properties

      - name: Create Resources Directory for Intergration Tests
        working-directory: ./backend/src/test
        run: mkdir resources

      - name: Create application-it.properties
        working-directory: ./backend/src/test/resources
        run: |
          touch application-it.properties
          echo "auth.whitelisted-emails=test@mail.com" >> ./application-it.properties
          echo "aws.s3.bucket=test" >> ./application-it.properties
          echo "security.cors.allowed-origins=*" >> ./application-it.properties
          echo "security.jwt.secret-key=${{ secrets.API_SECURITY_JWT_SECRET_KEY }}" >> ./application-it.properties
          echo "spring.application.name=personal-website-api" >> ./application-it.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> ./application-it.properties
          echo "spring.jpa.hibernate.ddl-auto=create" >> ./application-it.properties
          echo "spring.cache.type=redis" >> ./application-it.properties
          echo "spring.cache.redis.time-to-live=900000" >> ./application-it.properties

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: michaelyi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, Test, Deploy API
        working-directory: ./backend
        run: |
          mvn -ntp clean verify
          docker build . -t michaelyi/personal-website-api:latest
          docker build . -t michaelyi/personal-website-api:${{ env.VERSION }}
          docker push michaelyi/personal-website-api:latest
          docker push michaelyi/personal-website-api:${{ env.VERSION }}

      - name: Deploy on EC2 Instance
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > personal-website-api-keypair.pem
          chmod 400 personal-website-api-keypair.pem
          ssh -o StrictHostKeyChecking=no -i personal-website-api-keypair.pem ec2-user@${SSH_HOST} '
            sudo docker stop personal-website-api || true
            sudo docker rm personal-website-api || true
            sudo docker rmi -f $(sudo docker image ls -a -q)
            sudo docker pull michaelyi/personal-website-api:latest
            sudo docker run --name personal-website-api -d -p 8080:8080 michaelyi/personal-website-api:latest
            '