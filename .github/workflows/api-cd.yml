name: api-cd

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      API_VERSION: 1.2.0

    steps:
      - uses: actions/checkout@v3

      - name: Create Properties Files
        run: |
          touch ./api/src/main/resources/application.properties
          echo "auth.whitelisted-emails=${{ secrets.API_AUTH_WHITELISTED_EMAILS }}" >> ./api/src/main/resources/application.properties
          echo "aws.access-key=${{ secrets.API_AWS_ACCESS_KEY }}" >> ./api/src/main/resources/application.properties
          echo "aws.secret-key=${{ secrets.API_AWS_SECRET_KEY }}" >> ./api/src/main/resources/application.properties
          echo "aws.s3.bucket=personal-website-api-bucket-prod" >> ./api/src/main/resources/application.properties
          echo "security.jwt.secret-key=${{ secrets.API_SECURITY_JWT_SECRET_KEY }}" >> ./api/src/main/resources/application.properties
          echo "security.cors.allowed-origins=${{ secrets.API_SECURITY_CORS_ALLOWED_ORIGINS }}" >> ./api/src/main/resources/application.properties
          echo "server.servlet.context-path=/" >> ./api/src/main/resources/application.properties
          echo "spring.application.name=personal-website-api" >> ./api/src/main/resources/application.properties
          echo "spring.datasource.url=${{ secrets.API_SPRING_TEST_DATASOURCE_URL }}" >> ./api/src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.API_SPRING_DATASOURCE_USERNAME }}" >> ./api/src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.API_SPRING_DATASOURCE_PASSWORD }}" >> ./api/src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> ./api/src/main/resources/application.properties
          touch ./api/src/test/resources/application-it.properties
          echo "auth.whitelisted-emails=\"test@mail.com\"" >> ./api/src/test/resources/application-it.properties
          echo "aws.access-key=${{ secrets.API_AWS_ACCESS_KEY }}" >> ./api/src/test/resources/application-it.properties
          echo "aws.secret-key=${{ secrets.API_AWS_SECRET_KEY }}" >> ./api/src/test/resources/application-it.properties
          echo "aws.s3.bucket=personal-website-api-bucket-test" >> ./api/src/test/resources/application-it.properties
          echo "security.jwt.secret-key=${{ secrets.API_SECURITY_JWT_SECRET_KEY }}" >> ./api/src/test/resources/application-it.properties
          echo "security.cors.allowed-origins=\"*\"" >> ./api/src/test/resources/application-it.properties
          echo "server.servlet.context-path=/" >> ./api/src/test/resources/application-it.properties
          echo "spring.application.name=personal-website-api" >> ./api/src/test/resources/application-it.properties
          echo "spring.datasource.url=${{ secrets.API_SPRING_TEST_DATASOURCE_URL }}" >> ./api/src/test/resources/application-it.properties
          echo "spring.datasource.username=${{ secrets.API_SPRING_DATASOURCE_USERNAME }}" >> ./api/src/test/resources/application-it.properties
          echo "spring.datasource.password=${{ secrets.API_SPRING_DATASOURCE_PASSWORD }}" >> ./api/src/test/resources/application-it.properties
          echo "spring.datasource.driver-class-name=org.postgresql.Driver" >> ./api/src/test/resources/application-it.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> ./api/src/test/resources/application-it.properties

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: michaelyi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, Test, Deploy API
        working-directory: ./api
        run: |
          docker build . -t michaelyi/personal-website-api:${{ env.API_VERSION }}
          docker push michaelyi/personal-website-api:${{ env.API_VERSION }}

      - name: Deploy on EC2 Instance
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > personal-website-api-keypair.pem
          chmod 400 personal-website-api-keypair.pem
          ssh -o StrictHostKeyChecking=no -i personal-website-api-keypair.pem ${SSH_USER}@${SSH_HOST} '
            sudo docker stop personal-website-api || true
            sudo docker rm personal-website-api || true
            sudo docker pull michaelyi/personal-website-api:${{ env.API_VERSION }}
            sudo docker run --name personal-website-api -d -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=${{ secrets.API_SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.API_SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.API_SPRING_DATASOURCE_PASSWORD }} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=${{ secrets.API_SPRING_JPA_HIBERNATE_DDL_AUTO }} \
              -e SERVER_SERVLET_CONTEXT_PATH=/ \
              -e AUTH_WHITELISTED_EMAILS=${{ secrets.API_AUTH_WHITELISTED_EMAILS }} \
              -e AWS_ACCESS_KEY=${{ secrets.API_AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.API_AWS_SECRET_KEY }} \
              -e AWS_S3_BUCKET=${{ secrets.API_AWS_S3_BUCKET }} \
              -e SECURITY_JWT_SECRET_KEY=${{ secrets.API_SECURITY_JWT_SECRET_KEY }} \
              -e SECURITY_CORS_ALLOWED_ORIGINS=${{ secrets.API_SECURITY_CORS_ALLOWED_ORIGINS }} \
              michaelyi/personal-website-api
            '
