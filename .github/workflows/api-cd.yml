name: api-cd 

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: api

    steps:
      - uses: actions/checkout@v3

     - name: Create Properties File for Integration Tests 
        uses: christian-draeger/write-properties@1.1.0
        with:
          path: './src/test/resources/application-it.properties'
          property: |
            'auth.whitelisted-emails'
            'aws.access-key'
            'aws.secret-key'
            'aws.region'
            'aws.s3.buckets.blog'
            'security.jwt.secret-key'
            'security.jwt.expiration'
            'security.cors.allowed-origins'
            'security.cors.allowed-methods'
            'security.cors.allowed-headers'
            'security.cors.exposed-headers'
            'spring.application.name'
            'spring.datasource.url'
            'spring.datasource.username'
            'spring.datasource.password'
            'spring.datasource.driver-class-name'
            'spring.jpa.hibernate.ddl-auto'
            'spring.jpa.properties.hibernate.dialect'
          value: |
            '"test@mail.com"'
            '${{ secrets.API_AWS_ACCESS_KEY }}'
            '${{ secrets.API_AWS_SECRET_KEY }}'
            'us-east-2'
            'personal-website-api-bucket-test'
            '${{ secrets.API_SECURITY_JWT_SECRET_KEY }}'
            '604800000'
            '"*"'
            '"GET,POST,PUT,DELETE,OPTIONS"'
            '"Authorization,Content-Type"'
            '"Authorization,Content-Type"'
            'personal-website-api'
            '${{ secrets.API_SPRING_TEST_DATASOURCE_URL }}'
            '${{ secrets.API_SPRING_DATASOURCE_USERNAME }}'
            '${{ secrets.API_SPRING_DATASOURCE_PASSWORD }}'
            'org.postgresql.Driver'
            'update'
            'org.hibernate.dialect.PostgreSQLDialect'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: michaelyi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, Test, Deploy API
        run: |
          docker build . -t michaelyi/personal-website-api:latest
          docker push michaelyi/personal-website-api:latest
      
      - name: Deploy on EC2 Instance
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}

        run: |
          echo "$SSH_PRIVATE_KEY" > personal-website-api-keypair.pem
          chmod 400 personal-website-api-keypair.pem
          ssh -o StrictHostKeyChecking=no -i personal-website-api-keypair.pem ${SSH_USER}@${SSH_HOST} '
            sudo docker stop personal-website-api || true
            sudo docker rm personal-website-api || true
            sudo docker pull michaelyi/personal-website-api:latest
            sudo docker run --name personal-website-api -d -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=${{ secrets.API_SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.API_SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.API_SPRING_DATASOURCE_PASSWORD }} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=${{ secrets.API_SPRING_JPA_HIBERNATE_DDL_AUTO }} \
              -e AUTH_WHITELISTED_EMAILS=${{ secrets.API_AUTH_WHITELISTED_EMAILS }} \
              -e AWS_ACCESS_KEY=${{ secrets.API_AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.API_AWS_SECRET_KEY }} \
              -e AWS_S3_BUCKETS_BLOG=${{ secrets.API_AWS_S3_BUCKETS_BLOG }} \
              -e SECURITY_JWT_SECRET_KEY=${{ secrets.API_SECURITY_JWT_SECRET_KEY }} \
              -e SECURITY_CORS_ALLOWED_ORIGINS=${{ secrets.API_SECURITY_CORS_ALLOWED_ORIGINS }} \
              michaelyi/personal-website-api
            '
