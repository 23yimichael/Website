name: deploy

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Setup JDK v17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Setup .env File in admin
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          envkey_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          envkey_NEXTAUTH_MAXAGE: ${{ secrets.NEXTAUTH_MAXAGE }}
          envkey_NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          envkey_NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          envkey_NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          envkey_NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL }}
          directory: ./apps/admin
          file_name: .env
          fail_on_empty: false
          sort_keys: false
      
      - name: Setup .env File in web
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          envkey_NEXT_PUBLIC_WEB_URL: ${{ secrets.NEXT_PUBLIC_WEB_URL }}
          directory: ./apps/web
          file_name: .env
          fail_on_empty: false
          sort_keys: false


      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: setup 
      
      - name: Build Production Bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        working-directory: ./apps/api
        run: |
          docker build . -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
      
      - name: SSH & Deploy on EC2 Instance
        env:
          API_SERVER_PORT: ${{ secrets.API_SERVER_PORT }}
          API_SPRING_APPLICATION_NAME: ${{ secrets.API_SPRING_APPLICATION_NAME }}
          API_SPRING_DATASOURCE_URL: ${{ secrets.API_SPRING_DATASOURCE_URL }}
          API_SPRING_DATASOURCE_USERNAME: ${{ secrets.API_SPRING_DATASOURCE_USERNAME }}
          API_SPRING_DATASOURCE_PASSWORD: ${{ secrets.API_SPRING_DATASOURCE_PASSWORD }}
          API_SPRING_JPA_HIBERNATE_DDL_AUTO: ${{ secrets.API_SPRING_JPA_HIBERNATE_DDL_AUTO }}
          API_SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: ${{ secrets.API_SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT }}
          API_SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: ${{ secrets.API_SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL }}
          API_SPRING_JPA_PROPERTIES_SHOW_SQL: ${{ secrets.API_SPRING_JPA_PROPERTIES_SHOW_SQL }}
          API_AUTH_WHITELISTED_EMAILS: ${{ secrets.API_AUTH_WHITELISTED_EMAILS }}
          API_AWS_ACCESS_KEY: ${{ secrets.API_AWS_ACCESS_KEY }}
          API_AWS_SECRET_KEY: ${{ secrets.API_AWS_SECRET_KEY }}
          API_AWS_REGION: ${{ secrets.API_AWS_REGION }}
          API_AWS_S3_BUCKETS_BLOG: ${{ secrets.API_AWS_S3_BUCKETS_BLOG }}
          API_SECURITY_JWT_SECRET_KEY: ${{ secrets.API_SECURITY_JWT_SECRET_KEY }}
          API_SECURITY_JWT_EXPIRATION: ${{ secrets.API_SECURITY_JWT_EXPIRATION }}
          API_SECURITY_CORS_ALLOWED_ORIGINS: ${{ secrets.API_SECURITY_CORS_ALLOWED_ORIGINS }}
          API_SECURITY_CORS_ALLOWED_METHODS: ${{ secrets.API_SECURITY_CORS_ALLOWED_METHODS }}
          API_SECURITY_CORS_ALLOWED_HEADERS: ${{ secrets.API_SECURITY_CORS_ALLOWED_HEADERS }}
          API_SECURITY_CORS_EXPOSED_HEADERS: ${{ secrets.API_SECURITY_CORS_EXPOSED_HEADERS }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}

        run: |
          echo "$SSH_PRIVATE_KEY" > personal-website-api-keypair.pem
          chmod 400 personal-website-api-keypair.pem
          ssh -o StrictHostKeyChecking=no -i personal-website-api-keypair.pem ${SSH_USER}@${SSH_HOST} '
            sudo docker stop ${API_SPRING_APPLICATION_NAME} || true
            sudo docker rm ${API_SPRING_APPLICATION_NAME} || true
            sudo docker pull ${DOCKERHUB_USERNAME}/${DOCKER_REPOSITORY}:latest
            sudo docker run --name ${API_SPRING_APPLICATION_NAME} -d -p ${API_SERVER_PORT}:${API_SERVER_PORT} \
              -e SPRING_DATASOURCE_URL=${API_SPRING_DATASOURCE_URL} \
              -e SPRING_DATASOURCE_USERNAME=${API_SPRING_DATASOURCE_USERNAME} \
              -e SPRING_DATASOURCE_PASSWORD=${API_SPRING_DATASOURCE_PASSWORD} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=${API_SPRING_JPA_HIBERNATE_DDL_AUTO} \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=${API_SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT} \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=${API_SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL} \
              -e SPRING_JPA_PROPERTIES_SHOW_SQL=${API_SPRING_JPA_PROPERTIES_SHOW_SQL} \
              -e AUTH_WHITELISTED_EMAILS=${API_AUTH_WHITELISTED_EMAILS} \
              -e AWS_ACCESS_KEY=${API_AWS_ACCESS_KEY} \
              -e AWS_SECRET_KEY=${API_AWS_SECRET_KEY} \
              -e AWS_REGION=${API_AWS_REGION} \
              -e AWS_S3_BUCKETS_BLOG=${API_AWS_S3_BUCKETS_BLOG} \
              -e SECURITY_JWT_SECRET_KEY=${API_SECURITY_JWT_SECRET_KEY} \
              -e SECURITY_JWT_EXPIRATION=${API_SECURITY_JWT_EXPIRATION} \
              -e SECURITY_CORS_ALLOWED_ORIGINS=${API_SECURITY_CORS_ALLOWED_ORIGINS} \
              -e SECURITY_CORS_ALLOWED_METHODS=${API_SECURITY_CORS_ALLOWED_METHODS} \
              -e SECURITY_CORS_ALLOWED_HEADERS=${API_SECURITY_CORS_ALLOWED_HEADERS} \
              -e SECURITY_CORS_EXPOSED_HEADERS=${API_SECURITY_CORS_EXPOSED_HEADERS} \
              ${DOCKERHUB_USERNAME}/${DOCKER_REPOSITORY}
            '
